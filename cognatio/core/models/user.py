"""
Model for the web user.
"""
__author__ = "Josh Reed"

# Our code
from cognatio.core.models import Base
from cognatio import env, cognatio_config

# Other libs
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy import String
from passlib.hash import bcrypt_sha256

# Base python
import os

class User(Base):

	__tablename__ = "user"

	# The ID, which all pages have. This is unique and autogenerated.
	id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
	# The user's email.
	email: Mapped[str] = mapped_column(String(64), unique=True, nullable=False)
	# The password hash, managed by methods in this class and bcrypt
	passhash: Mapped[str] = mapped_column(String(255))
	# Needed for flask login. Unlocks additional behavior, but we simply set it to False to disable that.
	is_anonymous = False
	is_active = True

	def __init__(self, email, password):
		"""Make a new user with the provided password and email

		Args:
			email (str): A valid email (not validated here)
			password (str): A password of any length
		"""
		self.passhash = self.pw_hash(password)
		self.email = email
		
	def is_authenticated(self) -> bool:
		"""This property should return True if this is an active user - in addition to being authenticated, they
		also have activated their account, not been suspended, or any condition your application has for
		rejecting an account. Inactive accounts may not log in (without being forced of course).

		Returns:
			bool: for flask_login
		"""
		return True
	
	def get_id(self) -> int:
		"""This method must return a str that uniquely identifies this user, and can be used to load the user
		from the user_loader callback. Note that this must be a str - if the ID is natively an int or some other
		type, you will need to convert it to str.

		Returns:
			int: the user's ID, for flask_login
		"""
		return self.id
	
	def pw_hash(self, pw):
		"""Hash this pw

		Args:
			pw (str): A password

		Returns:
			str: The hash'd version
		"""
		return bcrypt_sha256.hash(pw)

	def pw_validate(self, password):
		"""Determine if the provided password matches the hash for this account

		Args:
			password (str): A password string

		Returns:
			bool: True if it matches, False if not
		"""
		return bcrypt_sha256.verify(password, self.passhash)
	
	def is_owner_user(self) -> bool:
		"""Get whether this user is the owner-user

		Returns:
			bool:
		"""
		return self.id == cognatio_config["OWNER_USER_ID"]